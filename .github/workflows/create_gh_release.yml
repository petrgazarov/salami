name: Create GH release

on:
  push:
    tags:
      - "*"

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.goos }} ${{ matrix.arch_name }}

    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
            arch_name: x64

          - goos: darwin
            goarch: arm64
            arch_name: arm64

          - goos: linux
            goarch: amd64
            arch_name: x64

          - goos: linux
            goarch: arm64
            arch_name: arm64

          - goos: windows
            goarch: amd64
            arch_name: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21.2"

      - name: Get Salami version
        id: get-salami-version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Get binary name
        id: get-binary-name
        run: |
          echo "binary-name=salami-${{ steps.get-salami-version.outputs.version }}-${{ matrix.goos }}-${{ matrix.arch_name }}" >> $GITHUB_OUTPUT

      - name: Build binary
        run: |
          GOOS=${{ matrix.goos }} \
          GOARCH=${{ matrix.goarch }} \
          go build -o ${{ steps.get-binary-name.outputs.binary-name }}
        working-directory: ./cli

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.get-binary-name.outputs.binary-name }}
          path: cli/${{ steps.get-binary-name.outputs.binary-name }}
          if-no-files-found: error

  create-release:
    name: Create draft release

    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: Download binary artifacts
        uses: actions/download-artifact@v3

      - name: Get Salami version
        id: get-salami-version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          VERSION: ${{ steps.get-salami-version.outputs.version }}
        with:
          draft: true
          prerelease: ${{ contains(github.ref, '-rc') }}
          fail_on_unmatched_files: true
          files: |
            salami-${{ env.VERSION }}-darwin-x64/salami-${{ env.VERSION }}-darwin-x64
            salami-${{ env.VERSION }}-darwin-arm64/salami-${{ env.VERSION }}-darwin-arm64
            salami-${{ env.VERSION }}-linux-x64/salami-${{ env.VERSION }}-linux-x64
            salami-${{ env.VERSION }}-linux-arm64/salami-${{ env.VERSION }}-linux-arm64
